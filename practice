import React, { useState, useEffect } from 'react';
import { NavLink, useSearchParams } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import './LeagueList.css';

function LeagueList() {
  const { isAuthenticated, loading, user } = useAuth();
  const [leagues, setLeagues] = useState([]);
  const [leagueForm, setLeagueForm] = useState({ name: "" });
  const [searchParams] = useSearchParams();
  const domain = searchParams.get("domain");
  const [message, setMessage] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    if (loading) return;

    const fetchLeagues = async () => {
      try {
        let response;
        if (isAuthenticated) {
          response = await axios.get('/api/leagues', { withCredentials: true });
        } else if (domain) {
          response = await axios.get(`/api/leagues?domain=${domain}`);
        } else {
          return;
        }
        setLeagues(response.data.leagues || []);
      } catch (error) {
        console.error("Error fetching leagues:", error.response?.data || error.message);
      }
    };

    fetchLeagues();
  }, [domain, isAuthenticated, loading]);

  const handleLeague = (e) => {
    const { name, value } = e.target;
    setLeagueForm((prevForm) => ({ ...prevForm, [name]: value }));
  };

  const handleCreateLeague = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/leagues', leagueForm, { withCredentials: true });
      setLeagues((prevLeagues) => [...prevLeagues, response.data.league]);
      setLeagueForm({ name: "" });
      setMessage(`${response.data.league.name} created successfully`);
      setIsModalOpen(false);
      setTimeout(() => setMessage(''), 3000);
    } catch (error) {
      console.error('Error creating league:', error);
    }
  };

  const handleDeleteLeague = async (id) => {
    if (!window.confirm("Are you sure you want to delete this league?")) return;
    try {
      const response = await axios.delete(`/api/leagues/${id}`, { withCredentials: true });
      if (response.data.success) {
        setLeagues((prevLeagues) => prevLeagues.filter(league => league.id !== id));
        setMessage(`League deleted successfully`);
        setTimeout(() => setMessage(''), 3000);
      } else {
        alert(response.data.message);
      }
    } catch (error) {
      console.error('Error deleting league:', error);
      alert("Failed to delete league. Please try again.");
    }
  };

  if (loading) return <p>Loading leagues...</p>;

  return (
    <div className={isAuthenticated ? "leagueList_auth" : "leagueList_public"}>
      {isAuthenticated && (
        <>
          <button className="add-league-btn" onClick={() => setIsModalOpen(true)}>Add League</button>
          
          {isModalOpen && (
            <div className="modal-overlay">
              <div className="modal-content">
                <h3>Create League</h3>
                <form onSubmit={handleCreateLeague}>
                  <input 
                    type="text"
                    name="name"
                    value={leagueForm.name}
                    onChange={handleLeague}
                    placeholder="Enter league name"
                    required
                  />
                  <button type="submit">Create</button>
                  <button type="button" onClick={() => setIsModalOpen(false)}>Cancel</button>
                </form>
              </div>
            </div>
          )}
          
          {message && <p className="message">{message}</p>}

          <table className="league-table">
            <thead>
              <tr>
                <th>Leagues</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              {leagues.length === 0 ? (
                <tr><td colSpan="2">No leagues available</td></tr>
              ) : (
                leagues.map((league) => (
                  <tr key={league.id}>
                    <td>
                      <NavLink to={`/league/${league.id}${domain ? `?domain=${domain}` : ""}`}>
                        {league.name}
                      </NavLink>
                    </td>
                    <td>
                      <button className="update-btn">Update</button>
                      <button className="delete-btn" onClick={() => handleDeleteLeague(league.id)}>Delete</button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </>
      )}
    </div>
  );
}

export default LeagueList;
